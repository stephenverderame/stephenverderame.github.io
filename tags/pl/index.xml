<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>pl on</title><link>https://stephenverderame.github.io/tags/pl/</link><description>Recent content in pl on</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 07 Oct 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://stephenverderame.github.io/tags/pl/index.xml" rel="self" type="application/rss+xml"/><item><title>Not Now Null Pointers: LLVM Null Analysis</title><link>https://stephenverderame.github.io/blog/null-check/</link><pubDate>Sat, 07 Oct 2023 00:00:00 +0000</pubDate><guid>https://stephenverderame.github.io/blog/null-check/</guid><description>I&amp;rsquo;ve always been interested in being able to make guarantees about the correctness of a program without the high cost of doing something like a full-on verification in an automatic theorem prover such as Coq. Moreover, avoiding extra runtime costs would be extremely nice as well, especially for systems programming domains.
I recently began working on an LLVM pass which aims to guarantee the absence of loading and storing of null pointers.</description></item><item><title>Do Your Units Match? An Embedded DSL for Physical Quantities</title><link>https://stephenverderame.github.io/blog/unit-types/</link><pubDate>Fri, 18 Aug 2023 00:00:00 +0000</pubDate><guid>https://stephenverderame.github.io/blog/unit-types/</guid><description>Computations of physical values in programming languages can quickly get out of hand due to the complex units that the programmer has to keep track of. Good variable naming and comments can help, but nothing is stopping double run_time_sec from storing a time measured in milliseconds. Furthermore, different functions might use the same value, but measured in different units, requiring manual conversions. Overall, it&amp;rsquo;s just an unpleasant burden placed on the programmer and a cause of many errors.</description></item></channel></rss>