<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Projects on</title><link>https://stephenverderame.github.io/projects/</link><description>Recent content in Projects on</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://stephenverderame.github.io/projects/index.xml" rel="self" type="application/rss+xml"/><item><title>Eta Compiler</title><link>https://stephenverderame.github.io/projects/etac/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://stephenverderame.github.io/projects/etac/</guid><description>My all-time favorite class at Cornell so far is CS 4120, our compilers class. I took it during Spring 2023 and as part of this class, I worked in a group of 4 to implement an optimizing compiler for a C-like language Eta which would eventually get extended to become Rho. It compiles into x86_64 and we only got around to supporting the System V calling convention.
We implemented our compiler in Java (although one of my teammates and I were tempted to use Rust) using the CUP parser generator and JFlex lexer generator.</description></item><item><title>Project Oort</title><link>https://stephenverderame.github.io/projects/oort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://stephenverderame.github.io/projects/oort/</guid><description>Project Oort is a third-person space shooter game implemented in over 20k+ lines of Rust with OpenGL. You control a starfighter that must battle AI enemies in a zero-gravity asteroid field while managing the ship&amp;rsquo;s energy and shield.
Your ship is armed with a photon cannon, cloaking, and a gravity tether that allows you to swing from or pull asteroids or other ships.
Technical Implementations:
A Forward+ 1 physically based rendering engine which supports area lights, cascading shadow maps, soft shadows, animated models, and ray-marched volumetrics A 3-phase collision detection system utilizing an Octree, Bounding Volume Hierarchy of Oriented Bounded Boxes, and triangle intersections parallelized with compute shaders A behavior tree AI and a modification of A* for pathfinding Rigid Body Simulation with rotational motion Harada, T.</description></item><item><title>Excursion through C++</title><link>https://stephenverderame.github.io/projects/cpp-book/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://stephenverderame.github.io/projects/cpp-book/</guid><description>In preparation for my new role as Software Lead of Cornell Mars Rover for the 22-23 academic year, I wanted to compile a C++ reference that covers (quickly) most of what one would possibly need to know. I already did something similar during the Winter of 2020, however, I wanted to make a document easier on the eyes, add more information, and make it more accessible.
I am fully aware that busy college students will probably not read this, but it has been very useful for my own reference.</description></item><item><title>SAPL Interpreter</title><link>https://stephenverderame.github.io/projects/sapl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://stephenverderame.github.io/projects/sapl/</guid><description>Shiny Alpaca Preprocessing Language (SAPL) is a dynamically typed interpreted language based on Rust, OCaml, Python, and C++. The name was chosen since shiny is an antonym of rusty, as in Rust, and the alpaca is somewhat similar to a camel. The preprocessing language part was because originally the plan was for SAPL to be a preprocessor to any arbitrary language such as C or Javascript.
The language has features of imperative languages such as loops, classes, interfaces, and mutable arrays, but also has many functional features like pipelining, lambdas, and partial application.</description></item><item><title>Cornell Mars Rover</title><link>https://stephenverderame.github.io/projects/cmr/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://stephenverderame.github.io/projects/cmr/</guid><description>During my freshman year, I was accepted into the Cornell Mars Rover project team. I&amp;rsquo;ve been a member of the team ever since and was the Software Subteam lead for the 22-23 school year. For my senior year, I&amp;rsquo;ve decided to take a bit of a backseat role to make sure I have time for other things I want to do this year such as research.
We compete every year in the University Rover Challenge, held in Utah.</description></item><item><title>Strava Activity Log</title><link>https://stephenverderame.github.io/projects/strava-log/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://stephenverderame.github.io/projects/strava-log/</guid><description>Back in 2019, Strava used to provide the Training Log to free users. When they made this a premium feature, I was a tad annoyed and decided to try to implement it myself. To my delight, Strava provides all the necessary information available through its REST API.
As an Android user, I got to work developing an Android app that would give me back my beloved training log. I previously developed a C++ program that would visualize rides in 3D, so I rolled that feature in as well.</description></item><item><title>Webchat</title><link>https://stephenverderame.github.io/projects/webchat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://stephenverderame.github.io/projects/webchat/</guid><description>In 2019 I developed a C++ library that implements HTTP, HTTPS, and Websocket clients and servers. I also implemented an SMTP client as well for sending emails. This was used to create a simple chat site with a C++ backend that used an HTTP(S) and Websocket server.
I implemented WebLib, and then a year later reimplemented a better version. The improved version eliminated the temporal dependencies between a few API methods, used a stream-based API, and nearly eliminated data copies with a StreamView that can manipulate slices of memory buffers in place.</description></item><item><title>Puzzle Solver</title><link>https://stephenverderame.github.io/projects/puzzle-solver/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://stephenverderame.github.io/projects/puzzle-solver/</guid><description>Machine learning was/is all the rage and in 2018 I wanted to learn about it. I decided it would be a cool exercise to try and implement, from scratch, a maze and word-search solver in C++. Armed with not much more than 3Blue1Brown&amp;rsquo;s Recent Videos on neural networks and Google, I set about learning and implementing all the relevant linear algebra and computer vision algorithms necessary to do the job.</description></item><item><title>VR Mocap</title><link>https://stephenverderame.github.io/projects/mocap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://stephenverderame.github.io/projects/mocap/</guid><description>In 2019, using SteamVR, C++, and OpenGL I made a small program to record VR headset and controller motion, play it back, and export it as a BVH file which can be used to rig and animate a model in a program like Blender.
Somewhere I do have a motion-captured wave on a teddy-bear model generated from photogrammetry.
Demo This video is replaying the motion from a Beat Saber run, overlaid with the song I just played.</description></item><item><title>KFBR</title><link>https://stephenverderame.github.io/projects/kfbr/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://stephenverderame.github.io/projects/kfbr/</guid><description>As a sophomore in high school, my favorite class wasn&amp;rsquo;t math or CS (although we didn&amp;rsquo;t have any CS classes at the time), but history. A huge part of that was my teacher for AP European History, who had a huge impact on me and whom I consider to be one of my role models to this day.
Well, in 2017 I decided I wanted to step away from high-level graphics libraries like SDL and Java Swing, and learn OpenGL.</description></item></channel></rss>